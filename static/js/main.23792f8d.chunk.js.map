{"version":3,"sources":["components/Reel.js","constants/index.js","components/Slot.js","components/Debug.js","components/Balance.js","components/SpinButton.js","components/App.js","index.js"],"names":["Reel","symbolHeight","window","matchMedia","matches","this","backgroundShift","props","className","style","backgroundPosition","Component","SYMBOLS","name","pic","Slot","state","positions","currentPositions","spinsCount","spinReel","index","randomSReelShift","Math","floor","random","length","reelPositions","newReelPositions","slice","concat","onSpinReel","nextPositions","setState","doSpinReels","callback","timer","setInterval","setTimeout","clearInterval","updatePositionsCascade","getWinInfo","prevProps","isSpinning","onStopSpin","isDebugMode","backgroundShifts","JSON","stringify","getPositionsByShifts","winInfo","top","map","item","center","bottom","i","reelShift","newPositions","updateOneSlot","slotNumber","Promise","resolve","then","shownPositions","Array","from","idx","key","Debug","debug","handleChange","reelIdx","isSymbol","isPosition","event","value","target","newData","doApply","shifts","symbol","position","onApply","symbolValue","positionValue","TextField","select","undefined","onChange","InputProps","startAdornment","InputAdornment","MenuItem","getInputParameters","Fab","color","onClick","disabled","payTable","Balance","winLines","balance","prevState","calculateBalance","cherrySevenIds","barsIds","result","arr","every","v","includes","forEach","include1","indexOf","include2","lastIndexOf","barsCombinationCheck","reduce","payouts","updating","isWinner","FormControl","variant","InputLabel","htmlFor","OutlinedInput","id","labelWidth","getDerivedStateFromProps","nextProps","SpinButton","App","spentCoins","mode","onSpinButtonClick","updateWinInfo","checkIsWinner","updateBackgroundShifts","switchMode","values","Container","maxWidth","getWinnerLabel","FormControlLabel","label","control","Switch","checked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.23792f8d.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Reel extends Component {\r\n   static propTypes = {\r\n     backgroundShift: PropTypes.number\r\n   };\r\n\r\n   symbolHeight = 141;\r\n\r\n   componentDidMount() {\r\n      if (typeof window.matchMedia === \"function\") {\r\n         if (window.matchMedia(\"(max-width: 768px)\").matches) {\r\n            this.symbolHeight = 94;\r\n         }\r\n      }\r\n   }\r\n\r\n   render() {\r\n      const {backgroundShift} = this.props;\r\n      return (\r\n         <div className=\"reel-container\">\r\n            <div className=\"reel\"\r\n                 style={{backgroundPosition: `0px ${(backgroundShift * this.symbolHeight) * (-1)}px`}}/>\r\n         </div>\r\n      )\r\n   }\r\n}","export const SYMBOLS = [\r\n   {\r\n      name: \"3xBAR\",\r\n      pic: \"3XBAR.png\"\r\n   },\r\n   {\r\n      name: \"BAR\",\r\n      pic: \"BAR.png\"\r\n   },\r\n   {\r\n      name: \"2xBAR\",\r\n      pic: \"2XBAR.png\"\r\n   },\r\n   {\r\n      name: \"7\",\r\n      pic: \"7.png\"\r\n   },\r\n   {\r\n      name: \"Cherry\",\r\n      pic: \"Cherry.png\"\r\n   }\r\n];","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Reel from \"./Reel\";\r\nimport {SYMBOLS} from \"../constants/index\";\r\n\r\nexport default class Slot extends Component {\r\n   static propTypes = {\r\n      isSpinning: PropTypes.bool,\r\n      isDebugMode: PropTypes.bool,\r\n      backgroundShifts: PropTypes.arrayOf(PropTypes.number),\r\n      onStopSpin: PropTypes.func\r\n   };\r\n\r\n   state = {\r\n      positions: [\r\n         [0,1,2,3,4],\r\n         [0,1,2,3,4],\r\n         [0,1,2,3,4]\r\n      ],\r\n      currentPositions: [\r\n         [0,1,2,3,4],\r\n         [0,1,2,3,4],\r\n         [0,1,2,3,4]\r\n      ],\r\n      spinsCount: 0\r\n   };\r\n\r\n   componentDidUpdate(prevProps) {\r\n      if (this.props.isSpinning && !prevProps.isSpinning) {\r\n         this.doSpinReels(this.props.onStopSpin);\r\n      }\r\n\r\n      if (this.props.isDebugMode && this.props.backgroundShifts.length === 3\r\n         && JSON.stringify(this.props.backgroundShifts) !== JSON.stringify(prevProps.backgroundShifts))\r\n      {\r\n         let currentPositions = this.getPositionsByShifts();\r\n         let winInfo = this.getWinInfo(currentPositions);\r\n         this.props.onStopSpin(winInfo);\r\n      }\r\n   }\r\n\r\n   spinReel = (index) => {\r\n      const {currentPositions}=this.state;\r\n      const randomSReelShift = Math.floor(Math.random() * SYMBOLS.length)+1;\r\n      const reelPositions = currentPositions[index];\r\n      let newReelPositions = reelPositions.slice(randomSReelShift);\r\n      newReelPositions = newReelPositions.concat(reelPositions.slice(0, randomSReelShift));\r\n      this.onSpinReel(index, newReelPositions);\r\n   };\r\n\r\n\r\n   onSpinReel = (index, positions) => {\r\n      let nextPositions = this.state.currentPositions;\r\n      nextPositions[index] = positions;\r\n      this.setState({\r\n         currentPositions: nextPositions,\r\n         spinsCount: this.state.spinsCount + 1\r\n      });\r\n   };\r\n\r\n   doSpinReels = (callback) => {\r\n      this.setState({spinsCount: 0}, () => {\r\n         this.timer = setInterval(() => {\r\n            this.spinReel(0);\r\n            this.spinReel(1);\r\n            this.spinReel(2);\r\n         }, 300);\r\n         setTimeout(() => {\r\n            clearInterval(this.timer);\r\n            this.updatePositionsCascade();\r\n            callback(this.getWinInfo(this.state.currentPositions), this.state.spinsCount);\r\n         }, 3000);\r\n      });\r\n   };\r\n\r\n   getWinInfo(positions) {\r\n      return ({\r\n         top: positions.map(item => item[0]),\r\n         center: positions.map(item => item[1]),\r\n         bottom: positions.map(item => item[2])\r\n      });\r\n   }\r\n\r\n   getPositionsByShifts() {\r\n      const {backgroundShifts}=this.props;\r\n      const reelPositions = [0,1,2,3,4];\r\n      let positions = [];\r\n\r\n      for(let i=0; i<backgroundShifts.length; i++) {\r\n         let reelShift = backgroundShifts[i];\r\n         let newReelPositions = reelPositions.slice(reelShift);\r\n         newReelPositions = newReelPositions.concat(reelPositions.slice(0, reelShift));\r\n         positions[i] = newReelPositions;\r\n      }\r\n      return positions;\r\n   }\r\n\r\n   updatePositionsCascade() {\r\n      const {currentPositions, positions} = this.state;\r\n      let newPositions = positions, slotNumber = 0;\r\n\r\n      const updateOneSlot = slotNumber => {\r\n         return new Promise(resolve => {\r\n            newPositions[slotNumber] = currentPositions[slotNumber];\r\n            this.setState({\r\n               positions: newPositions\r\n            }, () => {\r\n               setTimeout(() => resolve(slotNumber), 500);\r\n            });\r\n         });\r\n      };\r\n\r\n      updateOneSlot(slotNumber)\r\n         .then((slotNumber) => updateOneSlot(slotNumber + 1)\r\n            .then((slotNumber) => updateOneSlot(slotNumber + 1)\r\n         ));\r\n   }\r\n\r\n   render() {\r\n      const {currentPositions, positions} = this.state;\r\n      const {isSpinning, isDebugMode, backgroundShifts}=this.props;\r\n      let shownPositions = isSpinning ? currentPositions : positions;\r\n      return (\r\n         <div className=\"slot-container\">\r\n            {Array.from([0,1,2]).map((idx) => (\r\n               <Reel key={idx} idx={idx}\r\n                     backgroundShift={!isDebugMode ? shownPositions[idx][0] : backgroundShifts[idx]}/>\r\n            ))}\r\n         </div>\r\n      )\r\n   }\r\n}","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport ReplayIcon from '@material-ui/icons/Replay';\r\nimport {SYMBOLS} from \"../constants/index\";\r\n\r\nexport default class Debug extends Component {\r\n   static propTypes = {\r\n      onApply: PropTypes.func\r\n   };\r\n\r\n   state = {\r\n      debug: []\r\n   };\r\n\r\n   handleChange = (reelIdx, isSymbol, isPosition) => event => {\r\n      const value = event.target.value;\r\n      let newData = this.state.debug;\r\n      newData[reelIdx] = {\r\n         ...newData[reelIdx],\r\n         [isSymbol ? 'symbol' : 'position']: value\r\n      };\r\n      this.setState({\r\n         debug: newData\r\n      });\r\n   };\r\n\r\n   doApply = () => {\r\n      const {debug} = this.state;\r\n      let shifts = debug.map(({symbol, position}) => (symbol-position));\r\n      this.props.onApply(shifts);\r\n   };\r\n\r\n   render() {\r\n      const {debug} = this.state;\r\n\r\n      const getInputParameters = reelIdx => {\r\n         let\r\n            symbolValue = (debug[reelIdx] || {}).symbol,\r\n            positionValue = (debug[reelIdx] || {}).position;\r\n\r\n         return (\r\n            <div key={reelIdx} className=\"col\">\r\n               <div className=\"col-header\">{`Reel #${reelIdx + 1}`}</div>\r\n               <TextField\r\n                  select\r\n                  value={symbolValue !== undefined ? symbolValue : \"\"}\r\n                  onChange={this.handleChange(reelIdx, true)}\r\n                  InputProps={{\r\n                     startAdornment: <InputAdornment position=\"start\">Symbol</InputAdornment>,\r\n                  }}\r\n               >\r\n                  {SYMBOLS.map((symbol, idx) => (\r\n                     <MenuItem key={idx} value={idx}>\r\n                        {symbol.name}\r\n                     </MenuItem>\r\n                  ))}\r\n               </TextField>\r\n               <TextField\r\n                  select\r\n                  value={positionValue !== undefined ? positionValue : \"\"}\r\n                  onChange={this.handleChange(reelIdx, false)}\r\n                  InputProps={{\r\n                     startAdornment: <InputAdornment position=\"start\">Position</InputAdornment>,\r\n                  }}\r\n               >\r\n                  {Array.from(['top', 'center', 'bottom']).map((position, idx) => (\r\n                     <MenuItem key={idx} value={idx}>\r\n                        {position}\r\n                     </MenuItem>\r\n                  ))}\r\n               </TextField>\r\n            </div>\r\n         );\r\n      };\r\n\r\n      return (\r\n         <div className=\"debug-container\">\r\n            <div className=\"debug-fields\">\r\n               {Array.from([0, 1, 2]).map(\r\n                  idx => getInputParameters(idx)\r\n               )}\r\n            </div>\r\n            <div className=\"debug-actions\">\r\n               <Fab color=\"secondary\" onClick={this.doApply} disabled={debug.length !== 3}>\r\n                  <ReplayIcon/>\r\n               </Fab>\r\n            </div>\r\n         </div>\r\n      )\r\n   }\r\n}","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport * as payouts from '../constants/payTable.json';\r\n\r\nconst payTable = payouts.default;\r\n\r\nexport default class Balance extends Component {\r\n   static propTypes = {\r\n      updating: PropTypes.bool,\r\n      isWinner: PropTypes.bool,\r\n      winLines: PropTypes.shape({\r\n         top: PropTypes.arrayOf(PropTypes.number),\r\n         center: PropTypes.arrayOf(PropTypes.number),\r\n         bottom: PropTypes.arrayOf(PropTypes.number)\r\n      })\r\n   };\r\n\r\n   state = {\r\n      winLines: null,\r\n      balance: 0\r\n   };\r\n\r\n   static getDerivedStateFromProps = (nextProps, prevState) => {\r\n      if (JSON.stringify(nextProps.winLines) !== JSON.stringify(prevState.winLines)) {\r\n         return {\r\n            winLines: nextProps.winLines,\r\n            balance: 0\r\n         }\r\n      }\r\n      return null;\r\n   };\r\n\r\n   componentDidUpdate(prevProps, prevState) {\r\n      if (JSON.stringify(prevState.winLines) !== JSON.stringify(this.state.winLines)) {\r\n         this.calculateBalance();\r\n      }\r\n   }\r\n\r\n   calculateBalance() {\r\n      const {winLines} = this.state;\r\n      const cherrySevenIds = [3,4];\r\n      const cherrySevenWin = 75;\r\n      const barsIds=[0,1,2];\r\n      const barsWin = 5;\r\n      let result = 0;\r\n\r\n      const cherrySevenCheck = (arr, target) => target.every(v => arr.includes(v));\r\n\r\n      const barsCombinationCheck = (arr, barsIds) => {\r\n         let result=0;\r\n         barsIds.forEach(v => {\r\n            let include1 = arr.indexOf(v);\r\n            let include2 = arr.lastIndexOf(v);\r\n            if (include1>-1 && include2>-1 && include1!==include2) {\r\n               result+=barsWin;\r\n            }\r\n         });\r\n         return result;\r\n      };\r\n\r\n      for(let position in winLines) {\r\n         if (cherrySevenCheck(winLines[position], cherrySevenIds)) {\r\n            result+=cherrySevenWin;\r\n         };\r\n\r\n         result += barsCombinationCheck(winLines[position], barsIds);\r\n\r\n         result += winLines[position].reduce((result, idx) => result + payTable[idx].payouts[position], 0);\r\n      };\r\n\r\n\r\n      this.setState({balance: result});\r\n   }\r\n\r\n   render() {\r\n      const {balance} = this.state;\r\n      const {updating, isWinner} = this.props;\r\n      return (\r\n         <div className=\"balance\">\r\n            <FormControl variant=\"outlined\">\r\n               <InputLabel htmlFor=\"component-outlined\">\r\n                  Balance\r\n               </InputLabel>\r\n               <OutlinedInput\r\n                  id=\"component-outlined\"\r\n                  className={\"balance-field \" + (isWinner ? 'with-blink' : '')}\r\n                  value={updating ? \"--\" : balance}\r\n                  labelWidth={60}\r\n               />\r\n            </FormControl>\r\n         </div>\r\n      )\r\n   }\r\n}","import React from 'react';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport LoopIcon from '@material-ui/icons/Loop';\r\n\r\nexport const SpinButton = ({disabled, onClick}) => (\r\n   <Fab\r\n      variant=\"extended\"\r\n      color=\"primary\"\r\n      className=\"spin-button\"\r\n      disabled={disabled}\r\n      onClick={onClick}\r\n   >\r\n      <LoopIcon className=\"spin-icon\"/>\r\n      Spin&nbsp;\r\n   </Fab>\r\n);","import React, {Component} from 'react';\nimport Container from '@material-ui/core/Container';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport Slot from \"./Slot\";\nimport Debug from \"./Debug\";\nimport Balance from \"./Balance\";\nimport {SpinButton} from \"./SpinButton\";\n\nexport default class App extends Component {\n   state = {\n      isSpinning: false,\n      winLines: {\n         top: [],\n         center: [],\n         bottom: []\n      },\n      backgroundShifts: [],\n      spentCoins: 0,\n      isWinner: undefined,\n      mode: 'random'\n   };\n\n   onSpinButtonClick = () => {\n      this.setState({\n         isSpinning:true,\n         spentCoins:0\n      });\n   };\n\n   updateWinInfo = (winInfo, spinsCount=0) => {\n      this.setState({\n         winLines: winInfo,\n         isSpinning: false,\n         spentCoins: this.state.spentCoins + spinsCount,\n         isWinner: this.checkIsWinner(winInfo.center)\n      });\n   };\n\n   updateBackgroundShifts = shifts => {\n      this.setState({backgroundShifts: shifts});\n   };\n\n   checkIsWinner(values) {\n      return values.every(v => v === values[0]);\n   };\n\n   getWinnerLabel() {\n      const {isSpinning, isWinner} = this.state;\n      return (\n         !isSpinning ? (isWinner ? 'Winner !' : 'Loser ((')\n            : 'Please wait...'\n      );\n   }\n\n   isDebugMode = () => {\n     return this.state.mode === 'debug';\n   };\n\n   switchMode = () => {\n      const {mode} = this.state;\n      this.setState({\n         mode: mode === 'debug' ? 'random' : 'debug',\n         isWinner: undefined,\n         backgroundShifts: []\n      });\n   };\n\n   render() {\n      const {isSpinning, winLines, mode, backgroundShifts, isWinner} = this.state;\n      return (\n         <Container maxWidth=\"sm\" className=\"slot-machine\">\n            <div className=\"content\">\n               <div className=\"row label\">\n                  {isWinner !== undefined ?\n                     <div className=\"title\">{this.getWinnerLabel()}</div>\n                     : <small>try your fortune !</small>\n                  }\n               </div>\n               <div className=\"row slot\">\n                  <Slot isSpinning={isSpinning}\n                        isDebugMode={mode === 'debug'}\n                        backgroundShifts={backgroundShifts}\n                        onStopSpin={this.updateWinInfo}\n                  />\n               </div>\n               <div className=\"row debug\">\n                  <FormControlLabel\n                     label=\"Debug\"\n                     control={\n                        <Switch\n                           checked={this.isDebugMode()}\n                           disabled={isSpinning} value={mode}\n                           color=\"secondary\" onChange={this.switchMode}\n                        />\n                     }\n                  />\n               </div>\n               <div className=\"row controls\">\n                  <Balance\n                     updating={isSpinning} winLines={winLines} isWinner={isWinner}\n                  />\n                  <SpinButton\n                     disabled={isSpinning || this.isDebugMode()}\n                     onClick={this.onSpinButtonClick}\n                  />\n               </div>\n               <div className=\"row\">\n                  {this.isDebugMode() &&\n                     <Debug onApply={this.updateBackgroundShifts} />\n                  }\n               </div>\n            </div>\n         </Container>\n      );\n   }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/index.scss';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}